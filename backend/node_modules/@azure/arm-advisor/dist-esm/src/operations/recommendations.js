/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing Recommendations operations. */
export class RecommendationsImpl {
    /**
     * Initialize a new instance of the class Recommendations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Obtains cached recommendations for a subscription. The recommendations are generated or computed by
     * invoking generateRecommendations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listPagingPage(options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Initiates the recommendation generation or computation process for a subscription. This operation is
     * asynchronous. The generated recommendations are stored in a cache in the Advisor service.
     * @param options The options parameters.
     */
    generate(options) {
        return this.client.sendOperationRequest({ options }, generateOperationSpec);
    }
    /**
     * Retrieves the status of the recommendation computation or generation process. Invoke this API after
     * calling the generation recommendation. The URI of this API is returned in the Location field of the
     * response header.
     * @param operationId The operation ID, which can be found from the Location field in the generate
     *                    recommendation response header.
     * @param options The options parameters.
     */
    getGenerateStatus(operationId, options) {
        return this.client.sendOperationRequest({ operationId, options }, getGenerateStatusOperationSpec);
    }
    /**
     * Obtains cached recommendations for a subscription. The recommendations are generated or computed by
     * invoking generateRecommendations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * Obtains details of a cached recommendation.
     * @param resourceUri The fully qualified Azure Resource Manager identifier of the resource to which
     *                    the recommendation applies.
     * @param recommendationId The recommendation ID.
     * @param options The options parameters.
     */
    get(resourceUri, recommendationId, options) {
        return this.client.sendOperationRequest({ resourceUri, recommendationId, options }, getOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const generateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/generateRecommendations",
    httpMethod: "POST",
    responses: {
        202: {
            headersMapper: Mappers.RecommendationsGenerateHeaders
        },
        default: {
            bodyMapper: Mappers.ArmErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const getGenerateStatusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/generateRecommendations/{operationId}",
    httpMethod: "GET",
    responses: {
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ArmErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.operationId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/recommendations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceRecommendationBaseListResult
        },
        default: {
            bodyMapper: Mappers.ArmErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.filter,
        Parameters.top,
        Parameters.skipToken
    ],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/{resourceUri}/providers/Microsoft.Advisor/recommendations/{recommendationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceRecommendationBase
        },
        default: {
            bodyMapper: Mappers.ArmErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceUri,
        Parameters.recommendationId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceRecommendationBaseListResult
        },
        default: {
            bodyMapper: Mappers.ArmErrorResponse
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=recommendations.js.map