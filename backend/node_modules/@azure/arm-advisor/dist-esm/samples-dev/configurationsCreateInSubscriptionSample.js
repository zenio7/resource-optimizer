/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { AdvisorManagementClient } from "@azure/arm-advisor";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Create/Overwrite Azure Advisor configuration and also delete all configurations of contained resource groups.
 *
 * @summary Create/Overwrite Azure Advisor configuration and also delete all configurations of contained resource groups.
 * x-ms-original-file: specification/advisor/resource-manager/Microsoft.Advisor/stable/2020-01-01/examples/CreateConfiguration.json
 */
function putConfigurations() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["ADVISOR_SUBSCRIPTION_ID"] || "subscriptionId";
        const configurationName = "default";
        const configContract = {
            digests: [
                {
                    name: "digestConfigName",
                    actionGroupResourceId: "/subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/microsoft.insights/actionGroups/actionGroupName",
                    categories: [
                        "HighAvailability",
                        "Security",
                        "Performance",
                        "Cost",
                        "OperationalExcellence"
                    ],
                    frequency: 30,
                    state: "Active",
                    language: "en"
                }
            ],
            exclude: true,
            lowCpuThreshold: "5"
        };
        const credential = new DefaultAzureCredential();
        const client = new AdvisorManagementClient(credential, subscriptionId);
        const result = yield client.configurations.createInSubscription(configurationName, configContract);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        putConfigurations();
    });
}
main().catch(console.error);
//# sourceMappingURL=configurationsCreateInSubscriptionSample.js.map