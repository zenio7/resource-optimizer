'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link Scenario} that the service accepts. */
exports.KnownScenario = void 0;
(function (KnownScenario) {
    /** Alerts */
    KnownScenario["Alerts"] = "Alerts";
})(exports.KnownScenario || (exports.KnownScenario = {}));
/** Known values of {@link CpuThreshold} that the service accepts. */
exports.KnownCpuThreshold = void 0;
(function (KnownCpuThreshold) {
    /** Five */
    KnownCpuThreshold["Five"] = "5";
    /** Ten */
    KnownCpuThreshold["Ten"] = "10";
    /** Fifteen */
    KnownCpuThreshold["Fifteen"] = "15";
    /** Twenty */
    KnownCpuThreshold["Twenty"] = "20";
})(exports.KnownCpuThreshold || (exports.KnownCpuThreshold = {}));
/** Known values of {@link Category} that the service accepts. */
exports.KnownCategory = void 0;
(function (KnownCategory) {
    /** HighAvailability */
    KnownCategory["HighAvailability"] = "HighAvailability";
    /** Security */
    KnownCategory["Security"] = "Security";
    /** Performance */
    KnownCategory["Performance"] = "Performance";
    /** Cost */
    KnownCategory["Cost"] = "Cost";
    /** OperationalExcellence */
    KnownCategory["OperationalExcellence"] = "OperationalExcellence";
})(exports.KnownCategory || (exports.KnownCategory = {}));
/** Known values of {@link DigestConfigState} that the service accepts. */
exports.KnownDigestConfigState = void 0;
(function (KnownDigestConfigState) {
    /** Active */
    KnownDigestConfigState["Active"] = "Active";
    /** Disabled */
    KnownDigestConfigState["Disabled"] = "Disabled";
})(exports.KnownDigestConfigState || (exports.KnownDigestConfigState = {}));
/** Known values of {@link ConfigurationName} that the service accepts. */
exports.KnownConfigurationName = void 0;
(function (KnownConfigurationName) {
    /** Default */
    KnownConfigurationName["Default"] = "default";
})(exports.KnownConfigurationName || (exports.KnownConfigurationName = {}));
/** Known values of {@link Impact} that the service accepts. */
exports.KnownImpact = void 0;
(function (KnownImpact) {
    /** High */
    KnownImpact["High"] = "High";
    /** Medium */
    KnownImpact["Medium"] = "Medium";
    /** Low */
    KnownImpact["Low"] = "Low";
})(exports.KnownImpact || (exports.KnownImpact = {}));
/** Known values of {@link Risk} that the service accepts. */
exports.KnownRisk = void 0;
(function (KnownRisk) {
    /** Error */
    KnownRisk["Error"] = "Error";
    /** Warning */
    KnownRisk["Warning"] = "Warning";
    /** None */
    KnownRisk["None"] = "None";
})(exports.KnownRisk || (exports.KnownRisk = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const MetadataEntity = {
    type: {
        name: "Composite",
        className: "MetadataEntity",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            },
            dependsOn: {
                serializedName: "properties.dependsOn",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            applicableScenarios: {
                serializedName: "properties.applicableScenarios",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            supportedValues: {
                serializedName: "properties.supportedValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetadataSupportedValueDetail"
                        }
                    }
                }
            }
        }
    }
};
const MetadataSupportedValueDetail = {
    type: {
        name: "Composite",
        className: "MetadataSupportedValueDetail",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ARMErrorResponseBody = {
    type: {
        name: "Composite",
        className: "ARMErrorResponseBody",
        modelProperties: {
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ArmErrorResponse = {
    type: {
        name: "Composite",
        className: "ArmErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ARMErrorResponseBody"
                }
            }
        }
    }
};
const MetadataEntityListResult = {
    type: {
        name: "Composite",
        className: "MetadataEntityListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetadataEntity"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConfigurationListResult = {
    type: {
        name: "Composite",
        className: "ConfigurationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConfigData"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DigestConfig = {
    type: {
        name: "Composite",
        className: "DigestConfig",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            actionGroupResourceId: {
                serializedName: "actionGroupResourceId",
                type: {
                    name: "String"
                }
            },
            frequency: {
                serializedName: "frequency",
                type: {
                    name: "Number"
                }
            },
            categories: {
                serializedName: "categories",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            language: {
                serializedName: "language",
                type: {
                    name: "String"
                }
            },
            state: {
                serializedName: "state",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceRecommendationBaseListResult = {
    type: {
        name: "Composite",
        className: "ResourceRecommendationBaseListResult",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceRecommendationBase"
                        }
                    }
                }
            }
        }
    }
};
const ShortDescription = {
    type: {
        name: "Composite",
        className: "ShortDescription",
        modelProperties: {
            problem: {
                serializedName: "problem",
                type: {
                    name: "String"
                }
            },
            solution: {
                serializedName: "solution",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceMetadata = {
    type: {
        name: "Composite",
        className: "ResourceMetadata",
        modelProperties: {
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "String"
                }
            },
            source: {
                serializedName: "source",
                type: {
                    name: "String"
                }
            },
            action: {
                serializedName: "action",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            },
            singular: {
                serializedName: "singular",
                type: {
                    name: "String"
                }
            },
            plural: {
                serializedName: "plural",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationEntityListResult = {
    type: {
        name: "Composite",
        className: "OperationEntityListResult",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationEntity"
                        }
                    }
                }
            }
        }
    }
};
const OperationEntity = {
    type: {
        name: "Composite",
        className: "OperationEntity",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplayInfo"
                }
            }
        }
    }
};
const OperationDisplayInfo = {
    type: {
        name: "Composite",
        className: "OperationDisplayInfo",
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SuppressionContractListResult = {
    type: {
        name: "Composite",
        className: "SuppressionContractListResult",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SuppressionContract"
                        }
                    }
                }
            }
        }
    }
};
const ConfigData = {
    type: {
        name: "Composite",
        className: "ConfigData",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { exclude: {
                serializedName: "properties.exclude",
                type: {
                    name: "Boolean"
                }
            }, lowCpuThreshold: {
                serializedName: "properties.lowCpuThreshold",
                type: {
                    name: "String"
                }
            }, digests: {
                serializedName: "properties.digests",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DigestConfig"
                        }
                    }
                }
            } })
    }
};
const ResourceRecommendationBase = {
    type: {
        name: "Composite",
        className: "ResourceRecommendationBase",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { category: {
                serializedName: "properties.category",
                type: {
                    name: "String"
                }
            }, impact: {
                serializedName: "properties.impact",
                type: {
                    name: "String"
                }
            }, impactedField: {
                serializedName: "properties.impactedField",
                type: {
                    name: "String"
                }
            }, impactedValue: {
                serializedName: "properties.impactedValue",
                type: {
                    name: "String"
                }
            }, lastUpdated: {
                serializedName: "properties.lastUpdated",
                type: {
                    name: "DateTime"
                }
            }, metadata: {
                serializedName: "properties.metadata",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, recommendationTypeId: {
                serializedName: "properties.recommendationTypeId",
                type: {
                    name: "String"
                }
            }, risk: {
                serializedName: "properties.risk",
                type: {
                    name: "String"
                }
            }, shortDescription: {
                serializedName: "properties.shortDescription",
                type: {
                    name: "Composite",
                    className: "ShortDescription"
                }
            }, suppressionIds: {
                serializedName: "properties.suppressionIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Uuid"
                        }
                    }
                }
            }, extendedProperties: {
                serializedName: "properties.extendedProperties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, resourceMetadata: {
                serializedName: "properties.resourceMetadata",
                type: {
                    name: "Composite",
                    className: "ResourceMetadata"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, label: {
                serializedName: "properties.label",
                type: {
                    name: "String"
                }
            }, learnMoreLink: {
                serializedName: "properties.learnMoreLink",
                type: {
                    name: "String"
                }
            }, potentialBenefits: {
                serializedName: "properties.potentialBenefits",
                type: {
                    name: "String"
                }
            }, actions: {
                serializedName: "properties.actions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: {
                                type: { name: "Dictionary", value: { type: { name: "any" } } }
                            }
                        }
                    }
                }
            }, remediation: {
                serializedName: "properties.remediation",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }, exposedMetadataProperties: {
                serializedName: "properties.exposedMetadataProperties",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            } })
    }
};
const SuppressionContract = {
    type: {
        name: "Composite",
        className: "SuppressionContract",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { suppressionId: {
                serializedName: "properties.suppressionId",
                type: {
                    name: "String"
                }
            }, ttl: {
                serializedName: "properties.ttl",
                type: {
                    name: "String"
                }
            }, expirationTimeStamp: {
                serializedName: "properties.expirationTimeStamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const RecommendationsGenerateHeaders = {
    type: {
        name: "Composite",
        className: "RecommendationsGenerateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "String"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    MetadataEntity: MetadataEntity,
    MetadataSupportedValueDetail: MetadataSupportedValueDetail,
    ARMErrorResponseBody: ARMErrorResponseBody,
    ArmErrorResponse: ArmErrorResponse,
    MetadataEntityListResult: MetadataEntityListResult,
    ConfigurationListResult: ConfigurationListResult,
    DigestConfig: DigestConfig,
    Resource: Resource,
    ResourceRecommendationBaseListResult: ResourceRecommendationBaseListResult,
    ShortDescription: ShortDescription,
    ResourceMetadata: ResourceMetadata,
    OperationEntityListResult: OperationEntityListResult,
    OperationEntity: OperationEntity,
    OperationDisplayInfo: OperationDisplayInfo,
    SuppressionContractListResult: SuppressionContractListResult,
    ConfigData: ConfigData,
    ResourceRecommendationBase: ResourceRecommendationBase,
    SuppressionContract: SuppressionContract,
    RecommendationsGenerateHeaders: RecommendationsGenerateHeaders
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-01-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const configContract = {
    parameterPath: "configContract",
    mapper: ConfigData
};
const configurationName = {
    parameterPath: "configurationName",
    mapper: {
        serializedName: "configurationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroup = {
    parameterPath: "resourceGroup",
    mapper: {
        serializedName: "resourceGroup",
        required: true,
        type: {
            name: "String"
        }
    }
};
const operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
const skipToken = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "$skipToken",
        type: {
            name: "String"
        }
    }
};
const resourceUri = {
    parameterPath: "resourceUri",
    mapper: {
        serializedName: "resourceUri",
        required: true,
        type: {
            name: "String"
        }
    }
};
const recommendationId = {
    parameterPath: "recommendationId",
    mapper: {
        serializedName: "recommendationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const suppressionContract = {
    parameterPath: "suppressionContract",
    mapper: SuppressionContract
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing RecommendationMetadata operations. */
class RecommendationMetadataImpl {
    /**
     * Initialize a new instance of the class RecommendationMetadata class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the list of metadata entities.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the metadata entity.
     * @param name Name of metadata entity.
     * @param options The options parameters.
     */
    get(name, options) {
        return this.client.sendOperationRequest({ name, options }, getOperationSpec$2);
    }
    /**
     * Gets the list of metadata entities.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$3);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$2 = {
    path: "/providers/Microsoft.Advisor/metadata/{name}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MetadataEntity
        },
        404: {
            bodyMapper: ARMErrorResponseBody,
            isError: true
        },
        default: {
            bodyMapper: ArmErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, name],
    headerParameters: [accept],
    serializer: serializer$4
};
const listOperationSpec$3 = {
    path: "/providers/Microsoft.Advisor/metadata",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MetadataEntityListResult
        },
        default: {
            bodyMapper: ArmErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$4
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MetadataEntityListResult
        },
        default: {
            bodyMapper: ArmErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Configurations operations. */
class ConfigurationsImpl {
    /**
     * Initialize a new instance of the class Configurations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Retrieve Azure Advisor configurations and also retrieve configurations of contained resource groups.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Retrieve Azure Advisor configurations.
     * @param resourceGroup The name of the Azure resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroup, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroup, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroup, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroup, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByResourceGroup(resourceGroup, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByResourceGroupPagingAll(resourceGroup, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroup, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Retrieve Azure Advisor configurations and also retrieve configurations of contained resource groups.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * Create/Overwrite Azure Advisor configuration and also delete all configurations of contained
     * resource groups.
     * @param configurationName Advisor configuration name. Value must be 'default'
     * @param configContract The Azure Advisor configuration data structure.
     * @param options The options parameters.
     */
    createInSubscription(configurationName, configContract, options) {
        return this.client.sendOperationRequest({ configurationName, configContract, options }, createInSubscriptionOperationSpec);
    }
    /**
     * Retrieve Azure Advisor configurations.
     * @param resourceGroup The name of the Azure resource group.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroup, options) {
        return this.client.sendOperationRequest({ resourceGroup, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Create/Overwrite Azure Advisor configuration.
     * @param configurationName Advisor configuration name. Value must be 'default'
     * @param resourceGroup The name of the Azure resource group.
     * @param configContract The Azure Advisor configuration data structure.
     * @param options The options parameters.
     */
    createInResourceGroup(configurationName, resourceGroup, configContract, options) {
        return this.client.sendOperationRequest({ configurationName, resourceGroup, configContract, options }, createInResourceGroupOperationSpec);
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/configurations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationListResult
        },
        default: {
            bodyMapper: ArmErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$3
};
const createInSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/configurations/{configurationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ConfigData
        },
        default: {
            bodyMapper: ArmErrorResponse
        }
    },
    requestBody: configContract,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        configurationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Advisor/configurations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationListResult
        },
        default: {
            bodyMapper: ArmErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroup
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createInResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Advisor/configurations/{configurationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ConfigData
        },
        default: {
            bodyMapper: ArmErrorResponse
        }
    },
    requestBody: configContract,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        configurationName,
        resourceGroup
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationListResult
        },
        default: {
            bodyMapper: ArmErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Recommendations operations. */
class RecommendationsImpl {
    /**
     * Initialize a new instance of the class Recommendations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Obtains cached recommendations for a subscription. The recommendations are generated or computed by
     * invoking generateRecommendations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Initiates the recommendation generation or computation process for a subscription. This operation is
     * asynchronous. The generated recommendations are stored in a cache in the Advisor service.
     * @param options The options parameters.
     */
    generate(options) {
        return this.client.sendOperationRequest({ options }, generateOperationSpec);
    }
    /**
     * Retrieves the status of the recommendation computation or generation process. Invoke this API after
     * calling the generation recommendation. The URI of this API is returned in the Location field of the
     * response header.
     * @param operationId The operation ID, which can be found from the Location field in the generate
     *                    recommendation response header.
     * @param options The options parameters.
     */
    getGenerateStatus(operationId, options) {
        return this.client.sendOperationRequest({ operationId, options }, getGenerateStatusOperationSpec);
    }
    /**
     * Obtains cached recommendations for a subscription. The recommendations are generated or computed by
     * invoking generateRecommendations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$2);
    }
    /**
     * Obtains details of a cached recommendation.
     * @param resourceUri The fully qualified Azure Resource Manager identifier of the resource to which
     *                    the recommendation applies.
     * @param recommendationId The recommendation ID.
     * @param options The options parameters.
     */
    get(resourceUri, recommendationId, options) {
        return this.client.sendOperationRequest({ resourceUri, recommendationId, options }, getOperationSpec$1);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const generateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/generateRecommendations",
    httpMethod: "POST",
    responses: {
        202: {
            headersMapper: RecommendationsGenerateHeaders
        },
        default: {
            bodyMapper: ArmErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$2
};
const getGenerateStatusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/generateRecommendations/{operationId}",
    httpMethod: "GET",
    responses: {
        202: {},
        204: {},
        default: {
            bodyMapper: ArmErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        operationId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/recommendations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResourceRecommendationBaseListResult
        },
        default: {
            bodyMapper: ArmErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        top,
        skipToken
    ],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$2
};
const getOperationSpec$1 = {
    path: "/{resourceUri}/providers/Microsoft.Advisor/recommendations/{recommendationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResourceRecommendationBase
        },
        default: {
            bodyMapper: ArmErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceUri,
        recommendationId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResourceRecommendationBaseListResult
        },
        default: {
            bodyMapper: ArmErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the available Advisor REST API operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the available Advisor REST API operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/providers/Microsoft.Advisor/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationEntityListResult
        },
        default: {
            bodyMapper: ArmErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$1
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationEntityListResult
        },
        default: {
            bodyMapper: ArmErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Suppressions operations. */
class SuppressionsImpl {
    /**
     * Initialize a new instance of the class Suppressions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Retrieves the list of snoozed or dismissed suppressions for a subscription. The snoozed or dismissed
     * attribute of a recommendation is referred to as a suppression.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Obtains the details of a suppression.
     * @param resourceUri The fully qualified Azure Resource Manager identifier of the resource to which
     *                    the recommendation applies.
     * @param recommendationId The recommendation ID.
     * @param name The name of the suppression.
     * @param options The options parameters.
     */
    get(resourceUri, recommendationId, name, options) {
        return this.client.sendOperationRequest({ resourceUri, recommendationId, name, options }, getOperationSpec);
    }
    /**
     * Enables the snoozed or dismissed attribute of a recommendation. The snoozed or dismissed attribute
     * is referred to as a suppression. Use this API to create or update the snoozed or dismissed status of
     * a recommendation.
     * @param resourceUri The fully qualified Azure Resource Manager identifier of the resource to which
     *                    the recommendation applies.
     * @param recommendationId The recommendation ID.
     * @param name The name of the suppression.
     * @param suppressionContract The snoozed or dismissed attribute; for example, the snooze duration.
     * @param options The options parameters.
     */
    create(resourceUri, recommendationId, name, suppressionContract, options) {
        return this.client.sendOperationRequest({ resourceUri, recommendationId, name, suppressionContract, options }, createOperationSpec);
    }
    /**
     * Enables the activation of a snoozed or dismissed recommendation. The snoozed or dismissed attribute
     * of a recommendation is referred to as a suppression.
     * @param resourceUri The fully qualified Azure Resource Manager identifier of the resource to which
     *                    the recommendation applies.
     * @param recommendationId The recommendation ID.
     * @param name The name of the suppression.
     * @param options The options parameters.
     */
    delete(resourceUri, recommendationId, name, options) {
        return this.client.sendOperationRequest({ resourceUri, recommendationId, name, options }, deleteOperationSpec);
    }
    /**
     * Retrieves the list of snoozed or dismissed suppressions for a subscription. The snoozed or dismissed
     * attribute of a recommendation is referred to as a suppression.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/{resourceUri}/providers/Microsoft.Advisor/recommendations/{recommendationId}/suppressions/{name}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SuppressionContract
        },
        404: {
            bodyMapper: ArmErrorResponse,
            isError: true
        },
        default: {
            bodyMapper: ArmErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        name,
        resourceUri,
        recommendationId
    ],
    headerParameters: [accept],
    serializer
};
const createOperationSpec = {
    path: "/{resourceUri}/providers/Microsoft.Advisor/recommendations/{recommendationId}/suppressions/{name}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SuppressionContract
        },
        404: {
            bodyMapper: ArmErrorResponse,
            isError: true
        },
        default: {
            bodyMapper: ArmErrorResponse
        }
    },
    requestBody: suppressionContract,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        name,
        resourceUri,
        recommendationId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/{resourceUri}/providers/Microsoft.Advisor/recommendations/{recommendationId}/suppressions/{name}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        default: {
            bodyMapper: ArmErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        name,
        resourceUri,
        recommendationId
    ],
    headerParameters: [accept],
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Advisor/suppressions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SuppressionContractListResult
        },
        default: {
            bodyMapper: ArmErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        top,
        skipToken
    ],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SuppressionContractListResult
        },
        default: {
            bodyMapper: ArmErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class AdvisorManagementClient extends coreClient__namespace.ServiceClient {
    constructor(credentials, subscriptionIdOrOptions, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        let subscriptionId;
        if (typeof subscriptionIdOrOptions === "string") {
            subscriptionId = subscriptionIdOrOptions;
        }
        else if (typeof subscriptionIdOrOptions === "object") {
            options = subscriptionIdOrOptions;
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-advisor/3.2.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2020-01-01";
        this.recommendationMetadata = new RecommendationMetadataImpl(this);
        this.configurations = new ConfigurationsImpl(this);
        this.recommendations = new RecommendationsImpl(this);
        this.operations = new OperationsImpl(this);
        this.suppressions = new SuppressionsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.AdvisorManagementClient = AdvisorManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
