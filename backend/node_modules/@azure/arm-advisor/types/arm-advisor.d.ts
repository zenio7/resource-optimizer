import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';

export declare class AdvisorManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId?: string;
    /**
     * Initializes a new instance of the AdvisorManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The Azure subscription ID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: AdvisorManagementClientOptionalParams);
    constructor(credentials: coreAuth.TokenCredential, options?: AdvisorManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    recommendationMetadata: RecommendationMetadata;
    configurations: Configurations;
    recommendations: Recommendations;
    operations: Operations;
    suppressions: Suppressions;
}

/** Optional parameters. */
export declare interface AdvisorManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

export declare interface ArmErrorResponse {
    /** ARM error response body. */
    error?: ARMErrorResponseBody;
}

/** ARM error response body. */
export declare interface ARMErrorResponseBody {
    /** Gets or sets the string that describes the error in detail and provides debugging information. */
    message?: string;
    /** Gets or sets the string that can be used to programmatically identify the error. */
    code?: string;
}

/**
 * Defines values for Category. \
 * {@link KnownCategory} can be used interchangeably with Category,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **HighAvailability** \
 * **Security** \
 * **Performance** \
 * **Cost** \
 * **OperationalExcellence**
 */
export declare type Category = string;

/** The Advisor configuration data structure. */
export declare interface ConfigData extends Resource {
    /** Exclude the resource from Advisor evaluations. Valid values: False (default) or True. */
    exclude?: boolean;
    /** Minimum percentage threshold for Advisor low CPU utilization evaluation. Valid only for subscriptions. Valid values: 5 (default), 10, 15 or 20. */
    lowCpuThreshold?: CpuThreshold;
    /** Advisor digest configuration. Valid only for subscriptions */
    digests?: DigestConfig[];
}

/** The list of Advisor configurations. */
export declare interface ConfigurationListResult {
    /** The list of configurations. */
    value?: ConfigData[];
    /** The link used to get the next page of configurations. */
    nextLink?: string;
}

/**
 * Defines values for ConfigurationName. \
 * {@link KnownConfigurationName} can be used interchangeably with ConfigurationName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **default**
 */
export declare type ConfigurationName = string;

/** Interface representing a Configurations. */
export declare interface Configurations {
    /**
     * Retrieve Azure Advisor configurations and also retrieve configurations of contained resource groups.
     * @param options The options parameters.
     */
    listBySubscription(options?: ConfigurationsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ConfigData>;
    /**
     * Retrieve Azure Advisor configurations.
     * @param resourceGroup The name of the Azure resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroup: string, options?: ConfigurationsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ConfigData>;
    /**
     * Create/Overwrite Azure Advisor configuration and also delete all configurations of contained
     * resource groups.
     * @param configurationName Advisor configuration name. Value must be 'default'
     * @param configContract The Azure Advisor configuration data structure.
     * @param options The options parameters.
     */
    createInSubscription(configurationName: ConfigurationName, configContract: ConfigData, options?: ConfigurationsCreateInSubscriptionOptionalParams): Promise<ConfigurationsCreateInSubscriptionResponse>;
    /**
     * Create/Overwrite Azure Advisor configuration.
     * @param configurationName Advisor configuration name. Value must be 'default'
     * @param resourceGroup The name of the Azure resource group.
     * @param configContract The Azure Advisor configuration data structure.
     * @param options The options parameters.
     */
    createInResourceGroup(configurationName: ConfigurationName, resourceGroup: string, configContract: ConfigData, options?: ConfigurationsCreateInResourceGroupOptionalParams): Promise<ConfigurationsCreateInResourceGroupResponse>;
}

/** Optional parameters. */
export declare interface ConfigurationsCreateInResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createInResourceGroup operation. */
export declare type ConfigurationsCreateInResourceGroupResponse = ConfigData;

/** Optional parameters. */
export declare interface ConfigurationsCreateInSubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createInSubscription operation. */
export declare type ConfigurationsCreateInSubscriptionResponse = ConfigData;

/** Optional parameters. */
export declare interface ConfigurationsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ConfigurationsListByResourceGroupResponse = ConfigurationListResult;

/** Optional parameters. */
export declare interface ConfigurationsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type ConfigurationsListBySubscriptionNextResponse = ConfigurationListResult;

/** Optional parameters. */
export declare interface ConfigurationsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type ConfigurationsListBySubscriptionResponse = ConfigurationListResult;

/**
 * Defines values for CpuThreshold. \
 * {@link KnownCpuThreshold} can be used interchangeably with CpuThreshold,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **5** \
 * **10** \
 * **15** \
 * **20**
 */
export declare type CpuThreshold = string;

/** Advisor Digest configuration entity */
export declare interface DigestConfig {
    /** Name of digest configuration. Value is case-insensitive and must be unique within a subscription. */
    name?: string;
    /** Action group resource id used by digest. */
    actionGroupResourceId?: string;
    /** Frequency that digest will be triggered, in days. Value must be between 7 and 30 days inclusive. */
    frequency?: number;
    /** Categories to send digest for. If categories are not provided, then digest will be sent for all categories. */
    categories?: Category[];
    /** Language for digest content body. Value must be ISO 639-1 code for one of Azure portal supported languages. Otherwise, it will be converted into one. Default value is English (en). */
    language?: string;
    /** State of digest configuration. */
    state?: DigestConfigState;
}

/**
 * Defines values for DigestConfigState. \
 * {@link KnownDigestConfigState} can be used interchangeably with DigestConfigState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active** \
 * **Disabled**
 */
export declare type DigestConfigState = string;

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/**
 * Defines values for Impact. \
 * {@link KnownImpact} can be used interchangeably with Impact,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **High** \
 * **Medium** \
 * **Low**
 */
export declare type Impact = string;

/** Known values of {@link Category} that the service accepts. */
export declare enum KnownCategory {
    /** HighAvailability */
    HighAvailability = "HighAvailability",
    /** Security */
    Security = "Security",
    /** Performance */
    Performance = "Performance",
    /** Cost */
    Cost = "Cost",
    /** OperationalExcellence */
    OperationalExcellence = "OperationalExcellence"
}

/** Known values of {@link ConfigurationName} that the service accepts. */
export declare enum KnownConfigurationName {
    /** Default */
    Default = "default"
}

/** Known values of {@link CpuThreshold} that the service accepts. */
export declare enum KnownCpuThreshold {
    /** Five */
    Five = "5",
    /** Ten */
    Ten = "10",
    /** Fifteen */
    Fifteen = "15",
    /** Twenty */
    Twenty = "20"
}

/** Known values of {@link DigestConfigState} that the service accepts. */
export declare enum KnownDigestConfigState {
    /** Active */
    Active = "Active",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link Impact} that the service accepts. */
export declare enum KnownImpact {
    /** High */
    High = "High",
    /** Medium */
    Medium = "Medium",
    /** Low */
    Low = "Low"
}

/** Known values of {@link Risk} that the service accepts. */
export declare enum KnownRisk {
    /** Error */
    Error = "Error",
    /** Warning */
    Warning = "Warning",
    /** None */
    None = "None"
}

/** Known values of {@link Scenario} that the service accepts. */
export declare enum KnownScenario {
    /** Alerts */
    Alerts = "Alerts"
}

/** The metadata entity contract. */
export declare interface MetadataEntity {
    /** The resource Id of the metadata entity. */
    id?: string;
    /** The type of the metadata entity. */
    type?: string;
    /** The name of the metadata entity. */
    name?: string;
    /** The display name. */
    displayName?: string;
    /** The list of keys on which this entity depends on. */
    dependsOn?: string[];
    /** The list of scenarios applicable to this metadata entity. */
    applicableScenarios?: Scenario[];
    /** The list of supported values. */
    supportedValues?: MetadataSupportedValueDetail[];
}

/** The list of metadata entities */
export declare interface MetadataEntityListResult {
    /** The list of metadata entities. */
    value?: MetadataEntity[];
    /** The link used to get the next page of metadata. */
    nextLink?: string;
}

/** The metadata supported value detail. */
export declare interface MetadataSupportedValueDetail {
    /** The id. */
    id?: string;
    /** The display name. */
    displayName?: string;
}

/** The operation supported by Advisor. */
export declare interface OperationDisplayInfo {
    /** The description of the operation. */
    description?: string;
    /** The action that users can perform, based on their permission level. */
    operation?: string;
    /** Service provider: Microsoft Advisor. */
    provider?: string;
    /** Resource on which the operation is performed. */
    resource?: string;
}

/** The operation supported by Advisor. */
export declare interface OperationEntity {
    /** Operation name: {provider}/{resource}/{operation}. */
    name?: string;
    /** The operation supported by Advisor. */
    display?: OperationDisplayInfo;
}

/** The list of Advisor operations. */
export declare interface OperationEntityListResult {
    /** The link used to get the next page of operations. */
    nextLink?: string;
    /** The list of operations. */
    value?: OperationEntity[];
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all the available Advisor REST API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<OperationEntity>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationEntityListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationEntityListResult;

/** Interface representing a RecommendationMetadata. */
export declare interface RecommendationMetadata {
    /**
     * Gets the list of metadata entities.
     * @param options The options parameters.
     */
    list(options?: RecommendationMetadataListOptionalParams): PagedAsyncIterableIterator<MetadataEntity>;
    /**
     * Gets the metadata entity.
     * @param name Name of metadata entity.
     * @param options The options parameters.
     */
    get(name: string, options?: RecommendationMetadataGetOptionalParams): Promise<RecommendationMetadataGetResponse>;
}

/** Optional parameters. */
export declare interface RecommendationMetadataGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type RecommendationMetadataGetResponse = MetadataEntity;

/** Optional parameters. */
export declare interface RecommendationMetadataListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type RecommendationMetadataListNextResponse = MetadataEntityListResult;

/** Optional parameters. */
export declare interface RecommendationMetadataListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type RecommendationMetadataListResponse = MetadataEntityListResult;

/** Interface representing a Recommendations. */
export declare interface Recommendations {
    /**
     * Obtains cached recommendations for a subscription. The recommendations are generated or computed by
     * invoking generateRecommendations.
     * @param options The options parameters.
     */
    list(options?: RecommendationsListOptionalParams): PagedAsyncIterableIterator<ResourceRecommendationBase>;
    /**
     * Initiates the recommendation generation or computation process for a subscription. This operation is
     * asynchronous. The generated recommendations are stored in a cache in the Advisor service.
     * @param options The options parameters.
     */
    generate(options?: RecommendationsGenerateOptionalParams): Promise<RecommendationsGenerateResponse>;
    /**
     * Retrieves the status of the recommendation computation or generation process. Invoke this API after
     * calling the generation recommendation. The URI of this API is returned in the Location field of the
     * response header.
     * @param operationId The operation ID, which can be found from the Location field in the generate
     *                    recommendation response header.
     * @param options The options parameters.
     */
    getGenerateStatus(operationId: string, options?: RecommendationsGetGenerateStatusOptionalParams): Promise<void>;
    /**
     * Obtains details of a cached recommendation.
     * @param resourceUri The fully qualified Azure Resource Manager identifier of the resource to which
     *                    the recommendation applies.
     * @param recommendationId The recommendation ID.
     * @param options The options parameters.
     */
    get(resourceUri: string, recommendationId: string, options?: RecommendationsGetOptionalParams): Promise<RecommendationsGetResponse>;
}

/** Defines headers for Recommendations_generate operation. */
export declare interface RecommendationsGenerateHeaders {
    /** The URL where the status of the asynchronous operation can be checked. */
    location?: string;
    /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
    retryAfter?: string;
}

/** Optional parameters. */
export declare interface RecommendationsGenerateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the generate operation. */
export declare type RecommendationsGenerateResponse = RecommendationsGenerateHeaders;

/** Optional parameters. */
export declare interface RecommendationsGetGenerateStatusOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface RecommendationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type RecommendationsGetResponse = ResourceRecommendationBase;

/** Optional parameters. */
export declare interface RecommendationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type RecommendationsListNextResponse = ResourceRecommendationBaseListResult;

/** Optional parameters. */
export declare interface RecommendationsListOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply to the recommendations.<br>Filter can be applied to properties ['ResourceId', 'ResourceGroup', 'RecommendationTypeGuid', '[Category](#category)'] with operators ['eq', 'and', 'or'].<br>Example:<br>- $filter=Category eq 'Cost' and ResourceGroup eq 'MyResourceGroup' */
    filter?: string;
    /** The number of recommendations per page if a paged version of this API is being used. */
    top?: number;
    /** The page-continuation token to use with a paged version of this API. */
    skipToken?: string;
}

/** Contains response data for the list operation. */
export declare type RecommendationsListResponse = ResourceRecommendationBaseListResult;

/** An Azure resource. */
export declare interface Resource {
    /**
     * The resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Recommendation resource metadata */
export declare interface ResourceMetadata {
    /** Azure resource Id of the assessed resource */
    resourceId?: string;
    /** Source from which recommendation is generated */
    source?: string;
    /** The action to view resource. */
    action?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /** The singular user friendly name of resource type. eg: virtual machine */
    singular?: string;
    /** The plural user friendly name of resource type. eg: virtual machines */
    plural?: string;
}

/** Advisor Recommendation. */
export declare interface ResourceRecommendationBase extends Resource {
    /** The category of the recommendation. */
    category?: Category;
    /** The business impact of the recommendation. */
    impact?: Impact;
    /** The resource type identified by Advisor. */
    impactedField?: string;
    /** The resource identified by Advisor. */
    impactedValue?: string;
    /** The most recent time that Advisor checked the validity of the recommendation. */
    lastUpdated?: Date;
    /** The recommendation metadata. */
    metadata?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /** The recommendation-type GUID. */
    recommendationTypeId?: string;
    /** The potential risk of not implementing the recommendation. */
    risk?: Risk;
    /** A summary of the recommendation. */
    shortDescription?: ShortDescription;
    /** The list of snoozed and dismissed rules for the recommendation. */
    suppressionIds?: string[];
    /** Extended properties */
    extendedProperties?: {
        [propertyName: string]: string;
    };
    /** Metadata of resource that was assessed */
    resourceMetadata?: ResourceMetadata;
    /** The detailed description of recommendation. */
    description?: string;
    /** The label of recommendation. */
    label?: string;
    /** The link to learn more about recommendation and generation logic. */
    learnMoreLink?: string;
    /** The potential benefit of implementing recommendation. */
    potentialBenefits?: string;
    /** The list of recommended actions to implement recommendation. */
    actions?: {
        [propertyName: string]: Record<string, unknown>;
    }[];
    /** The automated way to apply recommendation. */
    remediation?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /** The recommendation metadata properties exposed to customer to provide additional information. */
    exposedMetadataProperties?: {
        [propertyName: string]: Record<string, unknown>;
    };
}

/** The list of Advisor recommendations. */
export declare interface ResourceRecommendationBaseListResult {
    /** The link used to get the next page of recommendations. */
    nextLink?: string;
    /** The list of recommendations. */
    value?: ResourceRecommendationBase[];
}

/**
 * Defines values for Risk. \
 * {@link KnownRisk} can be used interchangeably with Risk,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Error** \
 * **Warning** \
 * **None**
 */
export declare type Risk = string;

/**
 * Defines values for Scenario. \
 * {@link KnownScenario} can be used interchangeably with Scenario,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Alerts**
 */
export declare type Scenario = string;

/** A summary of the recommendation. */
export declare interface ShortDescription {
    /** The issue or opportunity identified by the recommendation. */
    problem?: string;
    /** The remediation action suggested by the recommendation. */
    solution?: string;
}

/** The details of the snoozed or dismissed rule; for example, the duration, name, and GUID associated with the rule. */
export declare interface SuppressionContract extends Resource {
    /** The GUID of the suppression. */
    suppressionId?: string;
    /** The duration for which the suppression is valid. */
    ttl?: string;
    /**
     * Gets or sets the expiration time stamp.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expirationTimeStamp?: Date;
}

/** The list of Advisor suppressions. */
export declare interface SuppressionContractListResult {
    /** The link used to get the next page of suppressions. */
    nextLink?: string;
    /** The list of suppressions. */
    value?: SuppressionContract[];
}

/** Interface representing a Suppressions. */
export declare interface Suppressions {
    /**
     * Retrieves the list of snoozed or dismissed suppressions for a subscription. The snoozed or dismissed
     * attribute of a recommendation is referred to as a suppression.
     * @param options The options parameters.
     */
    list(options?: SuppressionsListOptionalParams): PagedAsyncIterableIterator<SuppressionContract>;
    /**
     * Obtains the details of a suppression.
     * @param resourceUri The fully qualified Azure Resource Manager identifier of the resource to which
     *                    the recommendation applies.
     * @param recommendationId The recommendation ID.
     * @param name The name of the suppression.
     * @param options The options parameters.
     */
    get(resourceUri: string, recommendationId: string, name: string, options?: SuppressionsGetOptionalParams): Promise<SuppressionsGetResponse>;
    /**
     * Enables the snoozed or dismissed attribute of a recommendation. The snoozed or dismissed attribute
     * is referred to as a suppression. Use this API to create or update the snoozed or dismissed status of
     * a recommendation.
     * @param resourceUri The fully qualified Azure Resource Manager identifier of the resource to which
     *                    the recommendation applies.
     * @param recommendationId The recommendation ID.
     * @param name The name of the suppression.
     * @param suppressionContract The snoozed or dismissed attribute; for example, the snooze duration.
     * @param options The options parameters.
     */
    create(resourceUri: string, recommendationId: string, name: string, suppressionContract: SuppressionContract, options?: SuppressionsCreateOptionalParams): Promise<SuppressionsCreateResponse>;
    /**
     * Enables the activation of a snoozed or dismissed recommendation. The snoozed or dismissed attribute
     * of a recommendation is referred to as a suppression.
     * @param resourceUri The fully qualified Azure Resource Manager identifier of the resource to which
     *                    the recommendation applies.
     * @param recommendationId The recommendation ID.
     * @param name The name of the suppression.
     * @param options The options parameters.
     */
    delete(resourceUri: string, recommendationId: string, name: string, options?: SuppressionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface SuppressionsCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type SuppressionsCreateResponse = SuppressionContract;

/** Optional parameters. */
export declare interface SuppressionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SuppressionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SuppressionsGetResponse = SuppressionContract;

/** Optional parameters. */
export declare interface SuppressionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SuppressionsListNextResponse = SuppressionContractListResult;

/** Optional parameters. */
export declare interface SuppressionsListOptionalParams extends coreClient.OperationOptions {
    /** The number of suppressions per page if a paged version of this API is being used. */
    top?: number;
    /** The page-continuation token to use with a paged version of this API. */
    skipToken?: string;
}

/** Contains response data for the list operation. */
export declare type SuppressionsListResponse = SuppressionContractListResult;

export { }
